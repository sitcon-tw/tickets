---
import { defaultLocale } from "src/i18n/config";
import { localesList, l } from "src/i18n";
const { i18n = [], path = "", favicon = true, ga = true, title, description, image, theme = "#000", lang = defaultLocale } = Astro.props;
const site = import.meta.env.SITE;
const links = i18n
	.map(lang => {
		const url = lang === defaultLocale ? "" : "/" + lang;
		return `<link rel="alternate" hreflang="${lang}" href="${site}${url}/${path}" />`;
	})
	.join("\n");
const xDefault = `<link rel="alternate" hreflang="x-default" href="${site}/${path}" />`;
const canonical = `${site}/${path}`;
const fullImage = image?.startsWith("http") ? image : image ? `${site}${image}` : null;
const supportedLangs = localesList();
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />

		{title && <title>{title}</title>}
		{description && <meta name="description" content={description} />}
		{title && <meta property="og:title" content={title} />}
		{canonical && <meta property="og:url" content={canonical} />}
		{fullImage && image && <meta property="og:image" content={fullImage} />}
		{description && <meta property="og:description" content={description} />}
		{theme && <meta name="theme-color" content={theme} />}

		<!-- i18n alternate links -->
		<Fragment set:html={`${links}\n${xDefault}`} />

		<script define:vars={{ supportedLangs, defaultLocale }}>
			const local = url => {
				return supportedLangs.find(lang => url.toString().startsWith(`/${lang}`)) || defaultLocale;
			};

			const l = (path, lang = "") => {
				const currentLocale = local(window.location.pathname);
				const base = lang || currentLocale;
				if (!path) path = window.location.pathname.replace(`${currentLocale}/`, "");
				return `/${base}${path}`;
			};

			const currentLang = window.location.pathname.split("/")[1];
			if (!supportedLangs.includes(currentLang)) {
				let savedLang = localStorage.getItem("preferredLang") || navigator.language;
				savedLang = savedLang.replace("zh-TW", "zh-Hant").replace("zh-CN", "zh-Hans").replace("en-US", "en");
				savedLang = savedLang == "zh" ? "zh-Hant" : savedLang;
				console.log(savedLang, supportedLangs);
				if (savedLang && supportedLangs.includes(savedLang)) window.location.href = l("", savedLang);
			}
		</script>

		<!-- Favicon -->
		<!-- {
			favicon && (
				<>
					<link rel="apple-touch-icon" sizes="180x180" href="/static/icons/apple-touch-icon.png" />
					<link rel="icon" type="image/png" sizes="32x32" href="/static/icons/favicon-32x32.png" />
					<link rel="icon" type="image/png" sizes="16x16" href="/static/icons/favicon-16x16.png" />
					<link rel="manifest" href="/static/icons/site.webmanifest" />
					<link rel="shortcut icon" href="/static/icons/favicon.ico" />
					<meta name="msapplication-TileColor" content="#2d89ef" />
					<meta name="msapplication-config" content="/static/icons/browserconfig.xml" />
				</>
			)
		} -->

		<!-- Google Analytics -->
		{
			ga && (
				<>
					<script async src="https://www.googletagmanager.com/gtag/js?id=G-9R5PZG2VQG" />
					<script>
						{`window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'G-GVRT4CHSQJ');`}
					</script>
				</>
			)
		}
	</head>
	<body>
		<slot />
		<script define:vars={{ supportedLangs }}>
			document.querySelectorAll("[data-lang]").forEach(link => {
				link.addEventListener("click", function (e) {
					const lang = link.getAttribute("data-lang");
					if (supportedLangs.includes(lang)) localStorage.setItem("preferredLang", lang);
				});
			});
		</script>
	</body>
</html>

<style is:global>
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	:root {
		--color-gray-50: oklch(0.985 0.002 247.839);
		--color-gray-100: oklch(0.967 0.003 264.542);
		--color-gray-200: oklch(0.928 0.006 264.531);
		--color-gray-300: oklch(0.872 0.01 258.338);
		--color-gray-400: oklch(0.707 0.022 261.325);
		--color-gray-500: oklch(0.551 0.027 264.364);
		--color-gray-600: oklch(0.446 0.03 256.802);
		--color-gray-700: oklch(0.373 0.034 259.733);
		--color-gray-800: oklch(0.278 0.033 256.848);
		--color-gray-900: oklch(0.21 0.034 264.665);
		--color-gray-950: oklch(0.13 0.028 261.692);
	}

	body {
		font-family:
			system-ui,
			-apple-system,
			BlinkMacSystemFont,
			"Segoe UI",
			Roboto,
			Oxygen,
			Ubuntu,
			Cantarell,
			"Open Sans",
			"Helvetica Neue",
			sans-serif;
		background-color: var(--color-gray-900);
		color: var(--color-gray-100);
		min-height: 100dvh;
	}

	body:has(.confirming) {
		overflow: hidden;
	}

	main {
		padding-bottom: 0;
	}
	nav > div,
	main {
		max-width: 800px;
		margin: 0 auto;
		padding: 2rem;
	}

	a {
		color: inherit;
	}

	.button {
		background-color: var(--color-gray-700);
		border: 2px solid var(--color-gray-500);
		padding: 0.5rem 0.8rem;
		text-decoration: none;
		display: block;
		width: fit-content;
		cursor: pointer;
		font-size: 1.1rem;
		font-family: inherit;
		border-radius: 0.5rem;
		color: inherit;
	}

	input {
		background-color: var(--color-gray-800);
		color: inherit;
		font-family: inherit;
	}

	.button:hover {
		background-color: var(--color-gray-600);
	}

	.button:active {
		background-color: var(--color-gray-500);
	}

	.content h2 {
		margin-bottom: 1rem;
	}
	.content p {
		margin-bottom: 1rem;
	}
	.content h3 {
		margin-bottom: 0.5rem;
	}

	.content h4 {
		margin-bottom: 0.4rem;
	}
	.content li {
		margin-bottom: 0.3rem;
	}
	.content ol,
	.content ul {
		padding-left: 1.5rem;
		margin-bottom: 1rem;
	}
	.content hr {
		margin-block: 2rem;
	}

	ol,
	ul {
		padding-left: 1.5rem;
		margin-bottom: 1rem;
	}
	li {
		margin-bottom: 0.5rem;
	}
	nav img {
		filter: invert(1);
	}
</style>
