---
import Layout from "@layouts/Layout.astro";
import AdminNav from "@components/AdminNav.astro";
import * as i18n from "src/i18n";
import "src/styles/admin.css";
const lang = i18n.local(Astro.url.pathname);
const t = i18n.t(lang, {
	title: {
		"zh-Hant": "管理後台總覽",
		"zh-Hans": "管理后台总览",
		en: "Admin Dashboard"
	},
	description: {
		"zh-Hant": "票券銷售數據分析儀表板",
		"zh-Hans": "票券销售数据分析仪表板",
		en: "Ticket sales analytics dashboard"
	},
	overview: {
		"zh-Hant": "總覽",
		"zh-Hans": "总览",
		en: "Overview"
	},
	totalTickets: {
		"zh-Hant": "總票券數",
		"zh-Hans": "总票券数",
		en: "Total Tickets"
	},
	sold: {
		"zh-Hant": "已售出",
		"zh-Hans": "已售出",
		en: "Sold"
	},
	remaining: {
		"zh-Hant": "剩餘票券",
		"zh-Hans": "剩余票券",
		en: "Remaining Tickets"
	},
	salesRate: {
		"zh-Hant": "銷售率",
		"zh-Hans": "销售率",
		en: "Sales Rate"
	},
	tickets: {
		"zh-Hant": "張票券",
		"zh-Hans": "张票券",
		en: "tickets"
	},
	completion: {
		"zh-Hant": "完成度",
		"zh-Hans": "完成度",
		en: "Completion"
	},
	salesTrend: {
		"zh-Hant": "票券銷售趨勢",
		"zh-Hans": "票券销售趋势",
		en: "Ticket Sales Trend"
	},
	ticketDistribution: {
		"zh-Hant": "票券類型分布",
		"zh-Hans": "票券类型分布",
		en: "Ticket Type Distribution"
	},
	progressTitle: {
		"zh-Hant": "票券銷售進度",
		"zh-Hans": "票券销售进度",
		en: "Ticket Sales Progress"
	},
	student: {
		"zh-Hant": "學生票",
		"zh-Hans": "学生票",
		en: "Student Ticket"
	},
	regular: {
		"zh-Hant": "普通票",
		"zh-Hans": "普通票",
		en: "Regular Ticket"
	},
	distant: {
		"zh-Hant": "遠道而來票",
		"zh-Hans": "远道而来票",
		en: "Distant Ticket"
	},
	invite: {
		"zh-Hant": "邀請票",
		"zh-Hans": "邀请票",
		en: "Invite Ticket"
	},
	opensource: {
		"zh-Hant": "開源貢獻票",
		"zh-Hans": "开源贡献票",
		en: "Open Source Ticket"
	},
	remainingLabel: {
		"zh-Hant": "張剩餘",
		"zh-Hans": "张剩余",
		en: "remaining"
	},
	total: {
		"zh-Hant": "總數",
		"zh-Hans": "总数",
		en: "Total"
	},
	soldLabel: {
		"zh-Hant": "已售",
		"zh-Hans": "已售",
		en: "Sold"
	}
});
const l = i18n.l(Astro.url);
---

<Layout i18n={t.t} path="" title={t.title} theme="var(--color-gray-800)" lang={lang}>
	<AdminNav />
	<main class="dashboard">
		<h1>{t.overview}</h1>
		<div class="stats-grid">
			<div class="stat-card">
				<h3>{t.totalTickets}</h3>
				<div class="stat-number">500</div>
				<div class="stat-label">{t.tickets}</div>
			</div>
			<div class="stat-card">
				<h3>{t.sold}</h3>
				<div class="stat-number">347</div>
				<div class="stat-label">{t.tickets}</div>
			</div>
			<div class="stat-card">
				<h3>{t.remaining}</h3>
				<div class="stat-number">153</div>
				<div class="stat-label">{t.tickets}</div>
			</div>
			<div class="stat-card">
				<h3>{t.salesRate}</h3>
				<div class="stat-number">69.4%</div>
				<div class="stat-label">{t.completion}</div>
			</div>
		</div>

		<div class="charts-section">
			<div class="chart-container trend">
				<h2>{t.salesTrend}</h2>
				<canvas id="ticketTrendsChart" width="100%" height="50px"></canvas>
			</div>

			<div class="chart-container">
				<h2>{t.ticketDistribution}</h2>
				<canvas id="ticketDistributionChart" width="100%" height="100%"></canvas>
			</div>
		</div>

		<div class="progress-section">
			<h2>{t.progressTitle}</h2>
			<div class="progress-grid">
				<div class="progress-card">
					<h3>{t.student}</h3>
					<div class="progress-chart-wrapper">
						<canvas id="studentTicketProgress" width="200" height="100"></canvas>
					</div>
					<div class="remaining-display">
						<div class="remaining-number">26</div>
						<div class="remaining-label">{t.remainingLabel}</div>
					</div>
					<div class="progress-details">
						<div class="detail-item">
							<span>{t.total}</span>
							<span>150</span>
						</div>
						<div class="detail-item">
							<span>{t.soldLabel}</span>
							<span>124</span>
						</div>
					</div>
				</div>

				<div class="progress-card">
					<h3>{t.regular}</h3>
					<div class="progress-chart-wrapper">
						<canvas id="regularTicketProgress" width="200" height="100"></canvas>
					</div>
					<div class="remaining-display">
						<div class="remaining-number">57</div>
						<div class="remaining-label">{t.remainingLabel}</div>
					</div>
					<div class="progress-details">
						<div class="detail-item">
							<span>{t.total}</span>
							<span>200</span>
						</div>
						<div class="detail-item">
							<span>{t.soldLabel}</span>
							<span>143</span>
						</div>
					</div>
				</div>
				<div class="progress-card">
					<h3>{t.distant}</h3>
					<div class="progress-chart-wrapper">
						<canvas id="distantTicketProgress" width="200" height="100"></canvas>
					</div>
					<div class="remaining-display">
						<div class="remaining-number">35</div>
						<div class="remaining-label">{t.remainingLabel}</div>
					</div>
					<div class="progress-details">
						<div class="detail-item">
							<span>{t.total}</span>
							<span>80</span>
						</div>
						<div class="detail-item">
							<span>{t.soldLabel}</span>
							<span>45</span>
						</div>
					</div>
				</div>

				<div class="progress-card">
					<h3>{t.invite}</h3>
					<div class="progress-chart-wrapper">
						<canvas id="inviteTicketProgress" width="200" height="100"></canvas>
					</div>
					<div class="remaining-display">
						<div class="remaining-number">25</div>
						<div class="remaining-label">{t.remainingLabel}</div>
					</div>
					<div class="progress-details">
						<div class="detail-item">
							<span>{t.total}</span>
							<span>50</span>
						</div>
						<div class="detail-item">
							<span>{t.soldLabel}</span>
							<span>25</span>
						</div>
					</div>
				</div>

				<div class="progress-card">
					<h3>{t.opensource}</h3>
					<div class="progress-chart-wrapper">
						<canvas id="opensourceTicketProgress" width="200" height="100"></canvas>
					</div>
					<div class="remaining-display">
						<div class="remaining-number">10</div>
						<div class="remaining-label">{t.remainingLabel}</div>
					</div>
					<div class="progress-details">
						<div class="detail-item">
							<span>{t.total}</span>
							<span>20</span>
						</div>
						<div class="detail-item">
							<span>{t.soldLabel}</span>
							<span>10</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>

	<script>
		import { Chart, registerables } from "chart.js";
		import { analytics, initializeAdminPage } from "../../lib/admin.js";
		Chart.register(...registerables);

		// Dashboard data
		let dashboardData = null;

		// Initialize page with auth check and load data
		async function initializeDashboard() {
			try {
				// Check admin authentication
				const isAuthorized = await initializeAdminPage();
				if (!isAuthorized) return;

				// Load dashboard data
				const response = await analytics.getDashboard();
				if (response.success) {
					dashboardData = response.data;
					updateDashboardStats();
					initCharts();
				} else {
					console.error('Failed to load dashboard data:', response.message);
					// Fall back to fake data
					initCharts();
				}
			} catch (error) {
				console.error('Dashboard initialization failed:', error);
				// Fall back to fake data
				initCharts();
			}
		}

		// Update dashboard statistics with real data
		function updateDashboardStats() {
			if (!dashboardData) return;

			// Update main stats
			document.querySelector('.stats-grid .stat-card:nth-child(1) .stat-number').textContent = 
				dashboardData.totalTickets || '0';
			document.querySelector('.stats-grid .stat-card:nth-child(2) .stat-number').textContent = 
				dashboardData.soldTickets || '0';
			document.querySelector('.stats-grid .stat-card:nth-child(3) .stat-number').textContent = 
				dashboardData.remainingTickets || '0';
			
			const salesRate = dashboardData.totalTickets > 0 
				? ((dashboardData.soldTickets / dashboardData.totalTickets) * 100).toFixed(1)
				: '0';
			document.querySelector('.stats-grid .stat-card:nth-child(4) .stat-number').textContent = 
				salesRate + '%';

			// Update registration stats
			const totalReg = dashboardData.totalRegistrations || 0;
			const confirmedReg = dashboardData.confirmedRegistrations || 0;
			const pendingReg = dashboardData.pendingRegistrations || 0;
			
			if (totalReg > 0) {
				// Update progress cards with real data from ticket sales
				updateProgressCards();
			}
		}

		// Update individual ticket progress cards
		function updateProgressCards() {
			if (!dashboardData.ticketSales) return;

			// This would need to be adapted based on actual ticket sales data structure
			Object.entries(dashboardData.ticketSales).forEach(([ticketType, sales], index) => {
				const progressCard = document.querySelector(`.progress-card:nth-child(${index + 1})`);
				if (progressCard) {
					const remainingElement = progressCard.querySelector('.remaining-number');
					const totalElement = progressCard.querySelector('.detail-item:nth-child(1) span:last-child');
					const soldElement = progressCard.querySelector('.detail-item:nth-child(2) span:last-child');
					
					const salesData = sales as any;
					if (remainingElement) remainingElement.textContent = salesData.remaining || '0';
					if (totalElement) totalElement.textContent = salesData.total || '0';
					if (soldElement) soldElement.textContent = salesData.sold || '0';
				}
			});
		}

		// Fake data for demonstration (fallback)
		const ticketTypes = ["學生票", "普通票", "遠道而來票", "邀請票", "開源貢獻票"];
		const colors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"];

		const initCharts = () => {
			// Line Chart - Ticket Sales Trends Over Time
			const trendsCanvas = document.getElementById("ticketTrendsChart") as HTMLCanvasElement;
			const trendsCtx = trendsCanvas?.getContext("2d");
			if (trendsCtx) {
				const trendsChart = new Chart(trendsCtx, {
					type: "line",
					data: {
						labels: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月"],
						datasets: [
							{
								label: "學生票",
								data: [150, 145, 140, 135, 130, 128, 126, 124],
								borderColor: colors[0],
								backgroundColor: colors[0] + "20",
								tension: 0.4
							},
							{
								label: "普通票",
								data: [200, 190, 180, 170, 160, 155, 148, 143],
								borderColor: colors[1],
								backgroundColor: colors[1] + "20",
								tension: 0.4
							},
							{
								label: "遠道而來票",
								data: [80, 75, 70, 65, 58, 52, 48, 45],
								borderColor: colors[2],
								backgroundColor: colors[2] + "20",
								tension: 0.4
							},
							{
								label: "邀請票",
								data: [50, 48, 45, 40, 35, 32, 28, 25],
								borderColor: colors[3],
								backgroundColor: colors[3] + "20",
								tension: 0.4
							},
							{
								label: "開源貢獻票",
								data: [20, 18, 16, 15, 13, 12, 11, 10],
								borderColor: colors[4],
								backgroundColor: colors[4] + "20",
								tension: 0.4
							}
						]
					},
					options: {
						responsive: true,
						plugins: {
							// title: {
							// 	display: true,
							// 	text: "剩餘票券數量變化 (過去8個月)",
							// 	color: "#f3f4f6" // var(--color-gray-100)
							// },
							legend: {
								position: "bottom",
								labels: {
									color: "#f3f4f6" // var(--color-gray-100)
								}
							}
						},
						scales: {
							y: {
								beginAtZero: true,
								title: {
									display: true,
									text: "剩餘票券數量",
									color: "#f3f4f6" // var(--color-gray-100)
								},
								ticks: {
									color: "#d1d5db" // var(--color-gray-300)
								},
								grid: {
									color: "#4b5563" // var(--color-gray-600)
								}
							},
							x: {
								title: {
									display: true,
									text: "月份",
									color: "#f3f4f6" // var(--color-gray-100)
								},
								ticks: {
									color: "#d1d5db" // var(--color-gray-300)
								},
								grid: {
									color: "#4b5563" // var(--color-gray-600)
								}
							}
						}
					}
				});
			}

			// Doughnut Chart - Ticket Distribution
			const distributionCanvas = document.getElementById("ticketDistributionChart") as HTMLCanvasElement;
			const distributionCtx = distributionCanvas?.getContext("2d");
			if (distributionCtx) {
				const distributionChart = new Chart(distributionCtx, {
					type: "doughnut",
					data: {
						labels: ticketTypes,
						datasets: [
							{
								label: "剩餘票券",
								data: [26, 57, 35, 25, 10],
								backgroundColor: colors,
								borderWidth: 2,
								borderColor: "#fff"
							}
						]
					},
					options: {
						responsive: true,
						plugins: {
							// title: {
							// 	display: true,
							// 	text: "各類型票券分布",
							// 	color: "#f3f4f6" // var(--color-gray-100)
							// },
							legend: {
								position: "bottom",
								labels: {
									color: "#f3f4f6" // var(--color-gray-100)
								}
							},
							tooltip: {
								titleColor: "#f3f4f6", // var(--color-gray-100)
								bodyColor: "#f3f4f6", // var(--color-gray-100)
								backgroundColor: "#374151", // var(--color-gray-700)
								borderColor: "#6b7280", // var(--color-gray-500)
								borderWidth: 1,
								callbacks: {
									label: function (context) {
										const total = context.dataset.data.reduce((a, b) => a + b, 0);
										const percentage = ((context.parsed / total) * 100).toFixed(1);
										return context.label + ": " + context.parsed + " 張 (" + percentage + "%)";
									}
								}
							}
						}
					}
				});
			}

			// Progress Charts (Half Doughnut)
			const ticketData = [
				{ id: "studentTicketProgress", soldCount: 124, total: 150, color: "#FF6384" },
				{ id: "regularTicketProgress", soldCount: 143, total: 200, color: "#36A2EB" },
				{ id: "distantTicketProgress", soldCount: 45, total: 80, color: "#FFCE56" },
				{ id: "inviteTicketProgress", soldCount: 25, total: 50, color: "#4BC0C0" },
				{ id: "opensourceTicketProgress", soldCount: 10, total: 20, color: "#9966FF" }
			];

			ticketData.forEach(ticket => {
				const canvas = document.getElementById(ticket.id) as HTMLCanvasElement;
				const ctx = canvas?.getContext("2d");
				if (ctx) {
					const percentage = ((ticket.soldCount / ticket.total) * 100).toFixed(1);
					const remaining = ticket.total - ticket.soldCount;

					new Chart(ctx, {
						type: "doughnut",
						data: {
							labels: ["已售出", "剩餘"],
							datasets: [
								{
									data: [ticket.soldCount, remaining],
									backgroundColor: [ticket.color, "#E5E5E5"],
									borderWidth: 0
								}
							]
						},
						options: {
							responsive: true,
							maintainAspectRatio: false,
							circumference: 180,
							// @ts-ignore - Chart.js options
							cutout: "70%",
							rotation: 270,
							plugins: {
								legend: {
									display: false
								},
								tooltip: {
									titleColor: "#f3f4f6", // var(--color-gray-100)
									bodyColor: "#f3f4f6", // var(--color-gray-100)
									backgroundColor: "#374151", // var(--color-gray-700)
									borderColor: "#6b7280", // var(--color-gray-500)
									borderWidth: 1,
									callbacks: {
										label: function (context) {
											return context.label + ": " + context.parsed + " 張";
										}
									}
								}
							}
						},
						// @ts-ignore - Chart.js plugin typing issue
						plugins: [
							{
								id: 'centerText',
								afterDraw: function (chart) {
									const ctx = chart.ctx;
									const width = chart.width;
									const height = chart.height;

									ctx.restore();
									const fontSize = (height / 100).toFixed(2);
									ctx.font = `bold ${fontSize}em sans-serif`;
									ctx.textBaseline = "middle";
									ctx.fillStyle = ticket.color;

									const text = percentage + "%";
									const textX = Math.round((width - ctx.measureText(text).width) / 2);
									const textY = height / 1.4;

									ctx.fillText(text, textX, textY);
									ctx.save();
								}
							}
						]
					});
				}
			});
		};

		// Initialize dashboard when page loads
		document.addEventListener('DOMContentLoaded', initializeDashboard);
	</script>

	<style>
		.stats-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			gap: 1.5rem;
			margin-bottom: 3rem;
		}

		.stat-card {
			background: var(--color-gray-800);
			padding: 1.5rem;
			border-radius: 8px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			text-align: center;
		}

		.stat-card h3 {
			margin: 0 0 1rem 0;
			color: var(--color-gray-300);
			font-size: 0.9rem;
			font-weight: 500;
		}

		.stat-number {
			font-size: 2.5rem;
			font-weight: bold;
			color: var(--color-gray-100);
			margin-bottom: 0.5rem;
		}

		.stat-label {
			color: var(--color-gray-100);
			font-size: 0.8rem;
		}

		.charts-section {
			display: flex;
			gap: 2rem;
			margin-bottom: 3rem;
			flex-wrap: wrap;
		}

		.chart-container {
			background: var(--color-gray-800);
			padding: 1.5rem;
			border-radius: 8px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			flex: 1;
			max-width: 100%;
		}
		.trend {
			flex: 2;
		}

		.chart-container h2 {
			margin: 0 0 1rem 0;
			color: var(--color-gray-100);
			font-size: 1.2rem;
		}

		.progress-section {
			background: var(--color-gray-800);
			padding: 1.5rem;
			border-radius: 8px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		}

		.progress-section h2 {
			margin: 0 0 1.5rem 0;
			color: var(--color-gray-100);
			font-size: 1.2rem;
		}

		.progress-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
			gap: 1.5rem;
		}

		.progress-card {
			background: var(--color-gray-700);
			padding: 1.5rem;
			border-radius: 12px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			text-align: center;
			max-width: 100%;
		}

		.progress-card h3 {
			margin: 0 0 1.5rem 0;
			color: var(--color-gray-200);
			font-size: 1.1rem;
			font-weight: 600;
		}

		.progress-chart-wrapper {
			display: flex;
			justify-content: center;
			margin-bottom: 1rem;
		}

		.remaining-display {
			margin-bottom: 1.5rem;
			padding: 1rem;
			background: var(--color-gray-600);
			border-radius: 8px;
		}

		.remaining-number {
			font-size: 2.5rem;
			font-weight: bold;
			color: var(--color-gray-100);
			line-height: 1;
		}

		.remaining-label {
			font-size: 0.9rem;
			color: var(--color-gray-300);
			margin-top: 0.25rem;
		}

		.progress-details {
			display: flex;
			justify-content: space-around;
			gap: 1rem;
		}

		.detail-item {
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 0.25rem;
		}

		.detail-item span:first-child {
			color: var(--color-gray-300);
			font-size: 0.85rem;
			font-weight: 500;
		}

		.detail-item span:last-child {
			font-weight: 600;
			color: var(--color-gray-200);
			font-size: 1.1rem;
		}

		@media (max-width: 768px) {
			.charts-section {
				grid-template-columns: 1fr;
			}

			.stats-grid {
				grid-template-columns: repeat(2, 1fr);
			}

			.progress-grid {
				grid-template-columns: 1fr;
			}

			.progress-details {
				flex-direction: column;
				gap: 0.5rem;
			}

			.detail-item {
				flex-direction: row;
				justify-content: space-between;
			}
		}
	</style>
</Layout>
