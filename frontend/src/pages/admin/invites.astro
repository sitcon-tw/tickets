---
import Layout from "@layouts/Layout.astro";
import AdminNav from "@components/AdminNav.astro";
import * as i18n from "src/i18n";
import "src/styles/admin.css";
const lang = i18n.local(Astro.url.pathname);
const t = i18n.t(lang, {
	title: {
		"zh-Hant": "邀請碼",
		"zh-Hans": "邀请码",
		en: "Invitation Codes"
	},
	add: {
		"zh-Hant": "新增邀請碼組",
		"zh-Hans": "新增邀请码组",
		en: "Add Invitation Code Group"
	},
	exportCSV: {
		"zh-Hant": "匯出 CSV",
		"zh-Hans": "导出 CSV",
		en: "Export CSV"
	},
	search: {
		"zh-Hant": "搜尋名稱 / 代碼",
		"zh-Hans": "搜索名称 / 代码",
		en: "Search Name / Code"
	},
	loading: {
		"zh-Hant": "載入中...",
		"zh-Hans": "加载中...",
		en: "Loading..."
	},
	nodata: {
		"zh-Hant": "無資料",
		"zh-Hans": "无数据",
		en: "No data"
	},
	name: {
		"zh-Hant": "名稱",
		"zh-Hans": "名称",
		en: "Name"
	},
	total: {
		"zh-Hant": "總數",
		"zh-Hans": "总数",
		en: "Total"
	},
	used: {
		"zh-Hant": "已用",
		"zh-Hans": "已用",
		en: "Used"
	},
	remaining: {
		"zh-Hant": "剩餘",
		"zh-Hans": "剩余",
		en: "Remaining"
	},
	created: {
		"zh-Hant": "建立時間",
		"zh-Hans": "创建时间",
		en: "Created"
	},
	actions: {
		"zh-Hant": "動作",
		"zh-Hans": "动作",
		en: "Actions"
	},
	codes: {
		"zh-Hant": "邀請碼列表",
		"zh-Hans": "邀请码列表",
		en: "Invitation Codes"
	},
	code: {
		"zh-Hant": "代碼",
		"zh-Hans": "代码",
		en: "Code"
	},
	usage: {
		"zh-Hant": "使用次數",
		"zh-Hans": "使用次数",
		en: "Usage"
	},
	limit: {
		"zh-Hant": "使用上限",
		"zh-Hans": "使用上限",
		en: "Limit"
	},
	usedBy: {
		"zh-Hant": "使用者",
		"zh-Hans": "使用者",
		en: "Used By"
	},
	status: {
		"zh-Hant": "狀態",
		"zh-Hans": "状态",
		en: "Status"
	}
});
const l = i18n.l(Astro.url);
---

<Layout i18n={t.t} path="" title={t.title} lang={lang}>
	<AdminNav />
	<main>
		<h1>{t.title}</h1>
		<section class="toolbar admin-toolbar">
			<button id="addType" type="button">➕ {t.add}</button>
			<button id="exportTypes" type="button" class="secondary">⬇️ {t.exportCSV}</button>
			<input id="searchTypes" type="text" placeholder={"🔍" + t.search} />
		</section>
		<section class="types-wrapper">
			<div id="loading" class="loading">{t.loading}</div>
			<table id="typesTable" hidden class="types-table admin-table">
				<thead>
					<tr>
						<th>{t.name}</th>
						<th>{t.total}</th>
						<th>{t.used}</th>
						<th>{t.remaining}</th>
						<th>{t.created}</th>
						<th>{t.actions}</th>
					</tr>
				</thead>
				<tbody id="typesBody"></tbody>
			</table>
			<div id="empty" hidden class="empty">{t.nodata}</div>
		</section>

		<!-- Create/Edit Modal -->
		<div id="modal" class="modal" hidden aria-hidden="true" role="dialog" aria-modal="true">
			<div class="modal-content" role="document">
				<header class="modal-header">
					<h2 id="modalTitle">{t.add}</h2>
					<button type="button" class="close" id="closeModal" aria-label="Close">✕</button>
				</header>
				<form id="typeForm" class="form">
					<label
						>{t.name}
						<input name="name" type="text" required placeholder="e.g. VIP Media" />
					</label>
					<label id="amountGroup"
						>{t.amount}
						<input name="amount" type="number" min="1" max="1000" value="10" required />
					</label>
					<div class="actions-row">
						<button type="submit" class="primary" id="saveType">{t.save}</button>
						<button type="button" id="cancelModal">{t.cancel}</button>
					</div>
				</form>
			</div>
		</div>

		<!-- Codes Modal -->
		<div id="codesModal" class="modal" hidden aria-hidden="true" role="dialog" aria-modal="true">
			<div class="modal-content large" role="document">
				<header class="modal-header">
					<h2 id="codesTitle">{t.codes}</h2>
					<button type="button" class="close" id="closeCodes" aria-label="Close">✕</button>
				</header>
				<div class="codes-toolbar">
					<input id="searchCodes" type="text" placeholder={"🔍 " + t.search} />
					<button id="exportCodes" type="button" class="secondary">⬇️ {t.exportCSV}</button>
				</div>
				<div class="codes-table-wrapper">
					<table class="codes-table admin-table">
						<thead>
							<tr><th>{t.code}</th><th>{t.usage}</th><th>{t.limit}</th><th>{t.usedBy}</th><th>{t.status}</th></tr>
						</thead>
						<tbody id="codesBody"></tbody>
					</table>
					<div id="codesEmpty" class="empty" hidden>{t.nodata}</div>
				</div>
			</div>
		</div>
	</main>

	<style>
		.actions button {
			background: #222;
			border: 1px solid #444;
			color: #ddd;
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 0.65rem;
			cursor: pointer;
		}
		.actions button:hover {
			background: #333;
		}
		.modal {
			position: fixed;
			inset: 0;
			display: flex;
			align-items: flex-start;
			justify-content: center;
			padding: 4vh 1rem;
			background: #000a;
			backdrop-filter: blur(4px);
			overflow: auto;
			z-index: 10;
		}
		.modal[hidden] {
			display: none;
		}
		.modal-content {
			background: #1a1a1a;
			border: 1px solid #333;
			border-radius: 10px;
			padding: 1rem 1.2rem;
			margin-bottom: 4rem;
			max-width: 420px;
			width: 100%;
			box-shadow: 0 4px 24px -6px #000;
			animation: pop 0.15s ease;
		}
		.modal-content.large {
			max-width: 900px;
		}
		@keyframes pop {
			from {
				transform: translateY(8px);
				opacity: 0;
			}
			to {
				transform: translateY(0);
				opacity: 1;
			}
		}
		.modal-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 0.75rem;
		}
		.modal-header h2 {
			font-size: 1rem;
			margin: 0;
		}
		.close {
			background: #2a2a2a;
			border: 1px solid #444;
			color: #ccc;
			width: 32px;
			height: 32px;
			border-radius: 8px;
			cursor: pointer;
		}
		.close:hover {
			background: #333;
			color: #fff;
		}
		.form {
			display: flex;
			flex-direction: column;
			gap: 0.85rem;
		}
		.form label {
			display: flex;
			flex-direction: column;
			gap: 0.3rem;
			font-size: 0.65rem;
			text-transform: uppercase;
			letter-spacing: 0.05em;
			color: #bbb;
		}
		.form input {
			background: #111;
			border: 1px solid #333;
			color: #eee;
			border-radius: 6px;
			padding: 8px 10px;
			font-size: 0.8rem;
		}
		.form .actions-row {
			display: flex;
			gap: 0.5rem;
		}
		.form button {
			background: #222;
			border: 1px solid #444;
			color: #eee;
			border-radius: 6px;
			padding: 8px 14px;
			font-size: 0.75rem;
			cursor: pointer;
		}
		.form button.primary {
			background: #155e29;
			border-color: #1d7b34;
		}
		.form button.primary:hover {
			background: #1d7b34;
		}
		.codes-toolbar {
			display: flex;
			gap: 0.5rem;
			flex-wrap: wrap;
			margin-bottom: 0.75rem;
		}
		.codes-toolbar input {
			background: #111;
			border: 1px solid #333;
			color: #eee;
			border-radius: 6px;
			padding: 6px 10px;
			font-size: 0.75rem;
		}
		.codes-toolbar button {
			background: #222;
			border: 1px solid #444;
			color: #eee;
			border-radius: 6px;
			padding: 6px 12px;
			font-size: 0.65rem;
			cursor: pointer;
		}
		.codes-table-wrapper {
			max-height: 60vh;
			overflow: auto;
			border: 1px solid #222;
			border-radius: 8px;
		}
		.status-pill {
			display: inline-block;
			padding: 2px 6px;
			border-radius: 4px;
			font-size: 0.55rem;
			background: #222;
			border: 1px solid #333;
		}
		.status-pill.active {
			color: #4ade80;
		}
		.status-pill.usedup {
			color: #f87171;
		}
		@media (max-width: 900px) {
			.modal-content.large {
				max-width: 100%;
			}
		}
	</style>

	<script>
		import { invitationCodes as invitationCodesAPI, initializeAdminPage } from "../../lib/admin.js";

		// In-memory mock structures
		/** InviteType: { id, name, createdAt, codes: InviteCode[] } */
		/** InviteCode: { id, code, usedCount, usageLimit, usedBy?: string, active: boolean } */
		let inviteTypes = [];
		let filteredTypes = [];
		let currentEditing = null; // type id
		let viewingCodesOf = null; // type id
		let isLoading = false;

		const searchTypesEl = document.getElementById("searchTypes") as HTMLInputElement;
		const typesBody = document.getElementById("typesBody") as HTMLTableSectionElement;
		const typesTable = document.getElementById("typesTable") as HTMLTableElement;
		const loadingEl = document.getElementById("loading") as HTMLElement;
		const emptyEl = document.getElementById("empty") as HTMLElement;
		const addBtn = document.getElementById("addType") as HTMLButtonElement;
		const exportTypesBtn = document.getElementById("exportTypes") as HTMLButtonElement;
		const modal = document.getElementById("modal") as HTMLElement;
		const modalTitle = document.getElementById("modalTitle") as HTMLHeadingElement;
		const closeModalBtn = document.getElementById("closeModal") as HTMLButtonElement;
		const cancelModalBtn = document.getElementById("cancelModal") as HTMLButtonElement;
		const typeForm = document.getElementById("typeForm") as HTMLFormElement;
		const amountGroup = document.getElementById("amountGroup") as HTMLElement;
		const codesModal = document.getElementById("codesModal") as HTMLElement;
		const closeCodesBtn = document.getElementById("closeCodes") as HTMLButtonElement;
		const codesBody = document.getElementById("codesBody") as HTMLTableSectionElement;
		const codesTitle = document.getElementById("codesTitle") as HTMLHeadingElement;
		const searchCodesEl = document.getElementById("searchCodes") as HTMLInputElement;
		const exportCodesBtn = document.getElementById("exportCodes") as HTMLButtonElement;
		const codesEmpty = document.getElementById("codesEmpty") as HTMLElement;

		// Initialize page
		async function initializePage() {
			try {
				// Check admin authentication
				const isAuthorized = await initializeAdminPage();
				if (!isAuthorized) return;

				// Load invitation codes from backend
				await loadInvitationCodes();
				
				// Setup event listeners
				setupEventListeners();
				
				// Initial render
				renderTable();
				
			} catch (error) {
				console.error('Failed to initialize invites page:', error);
				showError('Failed to load page. Please try refreshing.');
				// Fall back to mock data
				seedMock();
				renderTable();
			}
		}

		// Load invitation codes from backend
		async function loadInvitationCodes() {
			if (isLoading) return;
			
			isLoading = true;
			showLoading(true);
			
			try {
				const response = await invitationCodesAPI.list({ limit: 500 });
				
				if (response.success) {
					// Transform backend data to frontend format
					// Group by invitation code type/name
					const codesByType = {};
					(response.data || []).forEach(code => {
						const typeName = code.type || 'Default';
						if (!codesByType[typeName]) {
							codesByType[typeName] = {
								id: typeName,
								name: typeName,
								createdAt: code.createdAt,
								codes: []
							};
						}
						codesByType[typeName].codes.push({
							id: code.id,
							code: code.code,
							usedCount: code.usedCount || 0,
							usageLimit: code.usageLimit || 1,
							usedBy: code.usedBy,
							active: code.isActive !== false
						});
					});
					
					inviteTypes = Object.values(codesByType);
				} else {
					throw new Error(response.message || 'Failed to load invitation codes');
				}
			} catch (error) {
				console.error('Failed to load invitation codes:', error);
				showError('Failed to load invitation codes: ' + error.message);
				// Fall back to mock data
				seedMock();
			} finally {
				isLoading = false;
				showLoading(false);
			}
		}

		// Setup event listeners
		function setupEventListeners() {
			// Search functionality
			searchTypesEl?.addEventListener('input', applyFilter);
			
			// Add new invitation code group
			addBtn?.addEventListener('click', openAddModal);
			
			// Modal controls
			closeModalBtn?.addEventListener('click', closeModal);
			cancelModalBtn?.addEventListener('click', closeModal);
			typeForm?.addEventListener('submit', handleFormSubmit);
			
			// Codes modal controls
			closeCodesBtn?.addEventListener('click', closeCodesModal);
			searchCodesEl?.addEventListener('input', filterCodes);
		}

		// Create new invitation codes
		async function createInvitationCodes(formData) {
			try {
				const data = {
					type: formData.name,
					count: parseInt(formData.amount),
					usageLimit: parseInt(formData.limit) || 1,
					expiresAt: formData.expires || null
				};

				const response = await invitationCodesAPI.bulkCreate(data);
				
				if (response.success) {
					// Reload data
					await loadInvitationCodes();
					renderTable();
					closeModal();
				} else {
					throw new Error(response.message || 'Failed to create invitation codes');
				}
			} catch (error) {
				console.error('Failed to create invitation codes:', error);
				alert('創建失敗: ' + error.message);
			}
		}

		// UI utility functions
		function showLoading(show) {
			loadingEl.hidden = !show;
		}

		function showError(message) {
			console.error(message);
			// Could add error display UI here
		}

		function seedMock() {
			if (inviteTypes.length) return;
			for (let i = 0; i < 5; i++) {
				const codes = Array.from({ length: 8 + i * 3 }, (_, j) => ({
					id: crypto.randomUUID(),
					code: `CODE${i}${j}${Math.random().toString(36).slice(2, 6).toUpperCase()}`,
					usedCount: j % 4 === 0 ? 1 : 0,
					usageLimit: 1,
					usedBy: j % 4 === 0 ? `user${j}@mail.com` : null,
					active: j % 5 !== 0
				}));
				inviteTypes.push({
					id: crypto.randomUUID(),
					name: ["VIP", "Media", "Staff", "Partner", "EarlyBird"][i],
					createdAt: new Date(Date.now() - i * 86400000).toISOString(),
					codes
				});
			}
		}

		function applyFilter() {
			const q = searchTypesEl.value.trim().toLowerCase();
			filteredTypes = inviteTypes.filter(t => {
				if (!q) return true;
				if (t.name.toLowerCase().includes(q)) return true;
				return t.codes.some(c => c.code.toLowerCase().includes(q));
			});
			renderTable();
		}

		function renderTable() {
			typesBody.innerHTML = "";
			if (!filteredTypes.length) {
				typesTable.hidden = true;
				emptyEl.hidden = false;
				return;
			}
			filteredTypes.forEach(t => {
				const used = t.codes.filter(c => c.usedCount > 0).length;
				const total = t.codes.length;
				const tr = document.createElement("tr");
				tr.innerHTML = `
					<td>${t.name}</td>
					<td>${total}</td>
					<td>${used}</td>
					<td>${total - used}</td>
					<td>${new Date(t.createdAt).toLocaleString()}</td>
					<td class="actions">
						<button data-act="view" data-id="${t.id}">檢視 (View)</button>
						<button data-act="edit" data-id="${t.id}">編輯 (Edit)</button>
					</td>
				`;
				typesBody.appendChild(tr);
			});
			typesTable.hidden = false;
			emptyEl.hidden = true;
		}

		// Modal utility functions
		function openAddModal() {
			openCreate();
		}

		function closeModal() {
			hideModal(modal);
		}

		function closeCodesModal() {
			hideModal(codesModal);
		}

		function showModal(m) {
			m.hidden = false;
		}

		function openCreate() {
			currentEditing = null;
			typeForm.reset();
			amountGroup.hidden = false;
			modalTitle.textContent = "新增邀請碼組 (Create)";
			showModal(modal);
		}
		function openEdit(id) {
			const t = inviteTypes.find(x => x.id === id);
			if (!t) return;
			currentEditing = id;
			modalTitle.textContent = "編輯邀請碼組 (Edit)";
			amountGroup.hidden = true; // can't change amount retroactively in mock
			const nameInput = typeForm.elements.namedItem("name") as HTMLInputElement | null;
			if (nameInput) nameInput.value = t.name;
			showModal(modal);
		}
		function openCodes(id) {
			const t = inviteTypes.find(x => x.id === id);
			if (!t) return;
			viewingCodesOf = id;
			codesTitle.textContent = `邀請碼列表 - ${t.name}`;
			renderCodes();
			showModal(codesModal);
		}
		function renderCodes() {
			const t = inviteTypes.find(x => x.id === viewingCodesOf);
			if (!t) return;
			const q = (searchCodesEl as HTMLInputElement).value.trim().toLowerCase();
			codesBody.innerHTML = "";
			let list = t.codes;
			if (q) list = list.filter(c => c.code.toLowerCase().includes(q) || (c.usedBy || "").toLowerCase().includes(q));
			if (!list.length) {
				codesEmpty.hidden = false;
				return;
			} else codesEmpty.hidden = true;
			list.forEach(c => {
				const tr = document.createElement("tr");
				const status = !c.active ? "inactive" : c.usedCount >= c.usageLimit ? "usedup" : "active";
				tr.innerHTML = `
					<td>${c.code}</td>
					<td>${c.usedCount}</td>
					<td>${c.usageLimit ?? ""}</td>
					<td>${c.usedBy ?? ""}</td>
					<td><span class="status-pill ${status}">${status}</span></td>`;
				codesBody.appendChild(tr);
			});
		}

		function filterCodes() {
			renderCodes();
		}
		function hideModal(m) {
			m.hidden = true;
			m.setAttribute("aria-hidden", "true");
		}

		addBtn.addEventListener("click", openCreate);
		closeModalBtn.addEventListener("click", () => hideModal(modal));
		cancelModalBtn.addEventListener("click", () => hideModal(modal));
		closeCodesBtn.addEventListener("click", () => hideModal(codesModal));

		// Handle form submission
		function handleFormSubmit(e) {
			e.preventDefault();
			const form = e.target;
			const formData = new FormData(form);
			const data = {
				name: (formData.get('name') as string)?.trim(),
				amount: formData.get('amount') as string,
				limit: formData.get('limit') as string,
				expires: formData.get('expires') as string
			};

			if (!data.name) {
				alert('名稱是必填的');
				return;
			}

			if (currentEditing) {
				// Edit existing type - not implemented in backend yet
				alert('編輯功能尚未實作');
			} else {
				// Create new invitation codes
				createInvitationCodes(data);
			}
		}

		function generateCode() {
			return Math.random().toString(36).slice(2, 10).toUpperCase();
		}

		typesBody.addEventListener("click", e => {
			const btn = (e.target as HTMLElement).closest("button") as HTMLButtonElement | null;
			if (!btn) return;
			const id = btn.dataset.id as string;
			if (btn.dataset.act === "view") openCodes(id);
			if (btn.dataset.act === "edit") openEdit(id);
		});

		searchTypesEl.addEventListener(
			"input",
			debounce(() => applyFilter(), 200)
		);
		searchCodesEl.addEventListener(
			"input",
			debounce(() => renderCodes(), 200)
		);

		function debounce(fn, wait) {
			let t;
			return (...a) => {
				clearTimeout(t);
				t = setTimeout(() => fn(...a), wait);
			};
		}

		exportTypesBtn.addEventListener("click", () => {
			const rows = [["id", "name", "totalCodes", "usedCodes", "remaining", "createdAt"]];
			filteredTypes.forEach(t => {
				const total = t.codes.length;
				const used = t.codes.filter(c => c.usedCount > 0).length;
				rows.push([t.id, t.name, total, used, total - used, t.createdAt]);
			});
			downloadCSV(rows, "invite-types.csv");
		});

		exportCodesBtn.addEventListener("click", () => {
			const t = inviteTypes.find(x => x.id === viewingCodesOf);
			if (!t) return;
			const q = searchCodesEl.value.trim().toLowerCase();
			let list = t.codes;
			if (q) list = list.filter(c => c.code.toLowerCase().includes(q) || (c.usedBy || "").toLowerCase().includes(q));
			const rows = [["typeId", "typeName", "code", "usedCount", "usageLimit", "usedBy", "active"]];
			list.forEach(c => rows.push([t.id, t.name, c.code, c.usedCount, c.usageLimit, c.usedBy || "", c.active]));
			downloadCSV(rows, `${t.name.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_codes.csv`);
		});

		function downloadCSV(rows, filename) {
			const csv = rows.map(r => r.map(v => '"' + String(v).replace(/"/g, '""') + '"').join(",")).join("\n");
			const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
			const url = URL.createObjectURL(blob);
			const a = document.createElement("a");
			a.href = url;
			a.download = filename;
			a.click();
			URL.revokeObjectURL(url);
		}

		// Initialize the page
		initializePage();
	</script>
</Layout>
