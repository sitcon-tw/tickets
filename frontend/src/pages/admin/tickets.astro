---
import Layout from "@layouts/Layout.astro";
import AdminNav from "@components/AdminNav.astro";
import * as i18n from "src/i18n";
import "src/styles/admin.css";
const lang = i18n.local(Astro.url.pathname);
const t = i18n.t(lang, {
	title: {
		"zh-Hant": "管理後台",
		"zh-Hans": "管理后台",
		en: "Admin Dashboard"
	},
	ticketPageTitle: {
		"zh-Hant": "票種管理",
		"zh-Hans": "票种管理",
		en: "Ticket Types"
	},
	ticketTypes: {
		"zh-Hant": "票種",
		"zh-Hans": "票种",
		en: "Ticket Types"
	},
	startTime: {
		"zh-Hant": "開始時間",
		"zh-Hans": "开始时间",
		en: "Start Time"
	},
	endTime: {
		"zh-Hant": "結束時間",
		"zh-Hans": "结束时间",
		en: "End Time"
	},
	status: {
		"zh-Hant": "狀態",
		"zh-Hans": "状态",
		en: "Status"
	},
	quantity: {
		"zh-Hant": "數量",
		"zh-Hans": "数量",
		en: "Quantity"
	},
	actions: {
		"zh-Hant": "操作",
		"zh-Hans": "操作",
		en: "Actions"
	},
	addTicket: {
		"zh-Hant": "新增票種",
		"zh-Hans": "新增票种",
		en: "Add Ticket"
	},
	editTicket: {
		"zh-Hant": "編輯票種",
		"zh-Hans": "编辑票种",
		en: "Edit Ticket"
	},
	deleteTicket: {
		"zh-Hant": "刪除票種",
		"zh-Hans": "删除票种",
		en: "Delete Ticket"
	},
	save: {
		"zh-Hant": "儲存",
		"zh-Hans": "保存",
		en: "Save"
	},
	cancel: {
		"zh-Hant": "取消",
		"zh-Hans": "取消",
		en: "Cancel"
	},
	statusLabel: {
		"zh-Hant": "狀態",
		"zh-Hans": "状态",
		en: "Status"
	},
	totalQuantityLabel: {
		"zh-Hant": "總數量（0 表示不限定數量）",
		"zh-Hans": "总数量（0 表示不限定数量）",
		en: "Total Quantity (0 means unlimited)"
	},
	enterTicketName: {
		"zh-Hant": "請輸入票種名稱",
		"zh-Hans": "请输入票种名称",
		en: "Please enter the ticket name"
	},
	startAfterEnd: {
		"zh-Hant": "開始時間不能晚於結束時間",
		"zh-Hans": "开始时间不能晚于结束时间",
		en: "Start time cannot be later than end time"
	},
	confirmDeleteTicket: {
		"zh-Hant": "確定要刪除這個票種嗎？此操作無法復原。",
		"zh-Hans": "确定要删除这个票种吗？此操作无法复原。",
		en: "Are you sure you want to delete this ticket? This action cannot be undone."
	},
	newTicket: {
		"zh-Hant": "新增票種",
		"zh-Hans": "新增票种",
		en: "New Ticket"
	},
	unlimitedQuantity: {
		"zh-Hant": "∞",
		"zh-Hans": "∞",
		en: "Unlimited"
	},
	notStarted: {
		"zh-Hant": "尚未開始販售",
		"zh-Hans": "尚未开始贩售",
		en: "Not Started"
	},
	ended: {
		"zh-Hant": "已結束販售",
		"zh-Hans": "已结束贩售",
		en: "Ended"
	},
	selling: {
		"zh-Hant": "販售中",
		"zh-Hans": "贩售中",
		en: "Selling"
	},
	ticketName: {
		"zh-Hant": "票種名稱",
		"zh-Hans": "票种名称",
		en: "Ticket Name"
	},
	ticketNamePlaceholder: {
		"zh-Hant": "例如：學生票（第一波）",
		"zh-Hans": "例如：学生票（第一波）",
		en: "e.g., Student Ticket (Wave 1)"
	}
});

const tt = t;
const l = i18n.l(Astro.url);
---

<Layout i18n={t.t} path="" title={t.ticketPageTitle} lang={lang}>
	<AdminNav />
	<main>
		<h1>{t.ticketPageTitle}</h1>

		<section class="ticket-overview">
			<div class="table-container">
				<table class="tickets-table">
					<thead>
						<tr>
							<th>{t.ticketTypes}</th>
							<th>{t.startTime}</th>
							<th>{t.endTime}</th>
							<th>{t.status}</th>
							<th>{t.quantity}</th>
							<th>{t.actions}</th>
						</tr>
					</thead>
					<tbody id="tickets-tbody">
						<!-- Tickets will be rendered here by JavaScript -->
					</tbody>
				</table>
			</div>
		</section>

		<section class="add-ticket-section">
			<button class="button add-ticket-btn" id="add-ticket-btn">
				<span>+ {t.addTicket}</span>
			</button>
		</section>
	</main>

	<!-- HTML Templates -->
	<template id="ticket-row-template">
		<tr>
			<td data-label={t.ticketTypes} class="ticket-name">
				<span class="display-value ticket-label"></span>
			</td>
			<td data-label={t.startTime} class="time-cell">
				<span class="display-value sale-start"></span>
			</td>
			<td data-label={t.endTime} class="time-cell">
				<span class="display-value sale-end"></span>
			</td>
			<td data-label={t.status} class="status-cell">
				<span class="display-value"><span class="status-badge"></span></span>
			</td>
			<td data-label={t.quantity} class="quantity">
				<span class="display-value quantity-value"></span>
			</td>
			<td data-label={t.actions} class="actions-cell">
				<div class="action-buttons">
					<button class="edit-btn button" data-action="edit">{tt.editTicket}</button>
					<button class="delete-btn button delete" data-action="delete">{t.deleteTicket}</button>
				</div>
			</td>
		</tr>
	</template>

	<!-- Template kept for structural reference (not used for editing anymore) -->
	<template id="new-ticket-row-template"></template>

	<!-- Modal for Add/Edit Ticket -->
	<div id="ticket-modal-overlay" class="modal-overlay" style="display:none;">
		<div class="modal" role="dialog" aria-modal="true" aria-labelledby="ticket-modal-title">
			<h2 id="ticket-modal-title">{tt.editTicket}</h2>
			<form id="ticket-form">
				<div class="form-grid">
					<label>
						<span>{t.ticketName}</span>
						<input id="ticket-name-input" name="name" type="text" required placeholder={t.ticketNamePlaceholder} />
					</label>
					<label>
						<span>{t.startTime}</span>
						<input id="ticket-start-input" name="saleStart" type="datetime-local" />
					</label>
					<label>
						<span>{t.endTime}</span>
						<input id="ticket-end-input" name="saleEnd" type="datetime-local" />
					</label>
					<label>
						<span>{t.totalQuantityLabel}</span>
						<input id="ticket-quantity-input" name="quantity" type="number" min="0" />
					</label>
					<div class="status-readonly">
						<>
							<span>{t.statusLabel}</span>
							<span id="ticket-status-display" class="status-badge"></span>
						</>
					</div>
				</div>
				<div class="modal-actions">
					<button type="submit" class="button primary" id="ticket-save-btn">
						{t.save}
					</button>
					<button type="button" class="button" id="ticket-cancel-btn">
						{t.cancel}
					</button>
				</div>
			</form>
		</div>
	</div>

	<script define:vars={{ tt }}>
		import { tickets as ticketsAPI, events as eventsAPI, initializeAdminPage } from "../../lib/admin.js";

		// Global state
		let currentEventId = null;
		let tickets = [];
		let isLoading = false;

		// Initialize page
		async function initializePage() {
			try {
				// Check admin authentication
				const isAuthorized = await initializeAdminPage();
				if (!isAuthorized) return;

				// Load events first to get the current event
				await loadEvents();
				
				// Load tickets for the current event
				if (currentEventId) {
					await loadTickets();
				}
				
				// Setup event listeners
				setupEventListeners();
				
			} catch (error) {
				console.error('Failed to initialize tickets page:', error);
				showError('Failed to load page. Please try refreshing.');
				// Fall back to demo data
				tickets = DEMO_TICKETS;
				renderTicketsTable();
			}
		}

		// Load events to get the current active event
		async function loadEvents() {
			try {
				const response = await eventsAPI.list();
				if (response.success && response.data && response.data.length > 0) {
					// Use the first active event
					currentEventId = response.data[0].id;
				} else {
					throw new Error('No active events found');
				}
			} catch (error) {
				console.error('Failed to load events:', error);
				throw error;
			}
		}

		// Load tickets from backend
		async function loadTickets() {
			if (isLoading || !currentEventId) return;
			
			isLoading = true;
			showLoading(true);
			
			try {
				const response = await ticketsAPI.list(currentEventId);
				
				if (response.success) {
					tickets = response.data || [];
					renderTicketsTable();
				} else {
					throw new Error(response.message || 'Failed to load tickets');
				}
			} catch (error) {
				console.error('Failed to load tickets:', error);
				showError('Failed to load tickets: ' + error.message);
				// Fall back to demo data
				tickets = DEMO_TICKETS;
				renderTicketsTable();
			} finally {
				isLoading = false;
				showLoading(false);
			}
		}

		// Setup event listeners
		function setupEventListeners() {
			// Add ticket button
			const addTicketBtn = document.getElementById('addTicketBtn');
			if (addTicketBtn) {
				addTicketBtn.addEventListener('click', () => openTicketModal());
			}

			// Save ticket form
			const saveTicketBtn = document.getElementById('saveTicketBtn');
			if (saveTicketBtn) {
				saveTicketBtn.addEventListener('click', saveTicket);
			}

			// Cancel button
			const cancelBtn = document.getElementById('cancelBtn');
			if (cancelBtn) {
				cancelBtn.addEventListener('click', closeTicketModal);
			}
		}

		// UI utility functions
		function showLoading(show) {
			const loadingIndicator = document.getElementById('loadingIndicator');
			if (loadingIndicator) {
				loadingIndicator.style.display = show ? 'block' : 'none';
			}
		}

		function showError(message) {
			const errorDiv = document.createElement('div');
			errorDiv.style.cssText = 'color: red; padding: 1rem; text-align: center;';
			errorDiv.textContent = message;
			
			const container = document.querySelector('.table-container');
			if (container) {
				container.innerHTML = '';
				container.appendChild(errorDiv);
			}
		}

		// Demo ticket data - fallback
		const DEMO_TICKETS = [
			{
				id: 1,
				name: "學生票（第二波）",
				saleStart: "2025-02-09T20:00",
				saleEnd: "2025-11-01T00:00",
				quantity: 426
			},
			{
				id: 2,
				name: "普通票（第二波）",
				saleStart: "2025-02-09T20:00",
				saleEnd: "2025-02-22T23:59",
				quantity: 47
			},
			{
				id: 3,
				name: "小石放煙火",
				saleStart: "2025-01-01T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 10
			},
			{
				id: 4,
				name: "學生票（第一波）",
				saleStart: "2025-01-12T20:00",
				saleEnd: "2025-01-25T23:59",
				quantity: 530
			},
			{
				id: 5,
				name: "一般票（第一波）",
				saleStart: "2025-01-12T20:00",
				saleEnd: "2025-01-25T23:59",
				quantity: 70
			},
			{
				id: 6,
				name: "講者邀請票",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 90
			},
			{
				id: 7,
				name: "邀請票",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: "∞"
			},
			{
				id: 8,
				name: "邀請票（遠道而來票）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 100
			},
			{
				id: 9,
				name: "邀請票（SITCON x OSCVPass 開源貢獻票）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 100
			},
			{
				id: 10,
				name: "邀請票（CfP 抽獎活動）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 20
			},
			{
				id: 11,
				name: "測試票",
				saleStart: "2025-01-01T00:00",
				saleEnd: "2026-03-07T00:00",
				quantity: "∞"
			}
		];

		// State management
		class TicketManager {
			constructor() {
				this.tickets = [...DEMO_TICKETS];
				this.editingRow = null;
				this.originalData = {};
				this.nextId = Math.max(...this.tickets.map(t => t.id)) + 1;
				this.init();
			}

			init() {
				this.renderTickets();
				this.bindEvents();
			}

			bindEvents() {
				// Add ticket button
				document.getElementById("add-ticket-btn").addEventListener("click", () => this.addNewTicket());
				// Table actions
				document.getElementById("tickets-tbody").addEventListener("click", e => {
					const btn = e.target.closest("button[data-action]");
					if (!btn) return;
					const action = btn.dataset.action;
					if (action === "edit") this.editRow(btn);
					if (action === "delete") this.deleteRow(btn);
				});
				// Modal form
				document.getElementById("ticket-form").addEventListener("submit", e => {
					e.preventDefault();
					this.saveFromModal();
				});
				document.getElementById("ticket-cancel-btn").addEventListener("click", () => this.closeModal());
				// Overlay click close (outside modal)
				document.getElementById("ticket-modal-overlay").addEventListener("click", e => {
					if (e.target.id === "ticket-modal-overlay") this.closeModal();
				});
			}

			renderTickets() {
				const tbody = document.getElementById("tickets-tbody");
				tbody.innerHTML = "";

				this.tickets.forEach(ticket => {
					const row = this.createTicketRow(ticket);
					tbody.appendChild(row);
				});
			}

			createTicketRow(ticket) {
				const template = document.getElementById("ticket-row-template");
				const row = template.content.cloneNode(true).querySelector("tr");
				row.dataset.ticketId = ticket.id;
				const cells = row.querySelectorAll("td");
				cells[0].querySelector(".ticket-label").textContent = ticket.name;
				cells[1].querySelector(".sale-start").textContent = ticket.saleStart ? this.formatDateTime(ticket.saleStart) : "";
				cells[2].querySelector(".sale-end").textContent = ticket.saleEnd ? this.formatDateTime(ticket.saleEnd) : "";
				const statusBadge = cells[3].querySelector(".status-badge");
				const status = this.computeStatus(ticket);
				statusBadge.textContent = status.label;
				statusBadge.className = `status-badge ${status.class}`;
				cells[4].querySelector(".quantity-value").textContent = ticket.quantity;
				return row;
			}

			editRow(button) {
				const row = button.closest("tr");
				const ticketId = parseInt(row.dataset.ticketId);
				const ticket = this.tickets.find(t => t.id === ticketId);
				this.openModal(ticket);
			}

			async saveFromModal() {
				const name = document.getElementById("ticket-name-input").value.trim();
				const saleStart = document.getElementById("ticket-start-input").value || null;
				const saleEnd = document.getElementById("ticket-end-input").value || null;
				const quantityRaw = document.getElementById("ticket-quantity-input").value;

				if (!name) {
					alert(tt.enterTicketName);
					return;
				}
				
				const quantity = quantityRaw === "" ? 0 : parseInt(quantityRaw);
				if (saleStart && saleEnd && new Date(saleStart) > new Date(saleEnd)) {
					alert(tt.startAfterEnd);
					return;
				}

				const ticketData = {
					name,
					saleStart,
					saleEnd,
					quantity,
					isActive: true
				};

				try {
					let response;
					if (this.currentEditingId) {
						// Update existing ticket
						response = await ticketsAPI.update(currentEventId, this.currentEditingId, ticketData);
					} else {
						// Create new ticket
						response = await ticketsAPI.create(currentEventId, ticketData);
					}

					if (response.success) {
						// Reload tickets to get updated data
						await loadTickets();
						this.closeModal();
					} else {
						throw new Error(response.message || 'Failed to save ticket');
					}
				} catch (error) {
					console.error('Failed to save ticket:', error);
					alert('保存失敗: ' + error.message);
				}
			}

			// Removed inline cancelEdit logic; modal handles cancel via closeModal

			async deleteRow(button) {
				if (!confirm(tt.confirmDeleteTicket)) return;

				const row = button.closest("tr");
				const ticketId = row.dataset.ticketId;

				if (ticketId) {
					try {
						const response = await ticketsAPI.delete(currentEventId, ticketId);
						
						if (response.success) {
							// Reload tickets to get updated data
							await loadTickets();
						} else {
							throw new Error(response.message || 'Failed to delete ticket');
						}
					} catch (error) {
						console.error('Failed to delete ticket:', error);
						alert('刪除失敗: ' + error.message);
					}
				}
			}

			addNewTicket() {
				this.openModal(null);
			}

			// (Old inline edit helpers removed)

			openModal(ticket) {
				this.currentEditingId = ticket ? ticket.id : null;
				const overlay = document.getElementById("ticket-modal-overlay");
				const title = document.getElementById("ticket-modal-title");
				const nameInput = document.getElementById("ticket-name-input");
				const startInput = document.getElementById("ticket-start-input");
				const endInput = document.getElementById("ticket-end-input");
				const quantityInput = document.getElementById("ticket-quantity-input");
				const statusDisplay = document.getElementById("ticket-status-display");

				if (ticket) {
					title.textContent = tt.editTicket;
					nameInput.value = ticket.name;
					startInput.value = ticket.saleStart || "";
					endInput.value = ticket.saleEnd || "";
					quantityInput.value = ticket.quantity === "∞" ? "" : ticket.quantity;
					const status = this.computeStatus(ticket);
					statusDisplay.textContent = status.label;
					statusDisplay.className = `status-badge ${status.class}`;
				} else {
					title.textContent = tt.newTicket;
					nameInput.value = "";
					startInput.value = "";
					endInput.value = "";
					quantityInput.value = "";
					statusDisplay.textContent = "--";
					statusDisplay.className = "status-badge";
				}

				overlay.style.display = "flex";
				nameInput.focus();
			}

			closeModal() {
				document.getElementById("ticket-modal-overlay").style.display = "none";
				this.currentEditingId = null;
			}

			renderTickets() {
				const tbody = document.getElementById("tickets-tbody");
				tbody.innerHTML = "";
				this.tickets.forEach(t => tbody.appendChild(this.createTicketRow(t)));
			}

			computeStatus(ticket) {
				const now = new Date();
				if (ticket.saleStart && new Date(ticket.saleStart) > now) {
					return { label: tt.notStarted, class: "pending" };
				}
				if (ticket.saleEnd && new Date(ticket.saleEnd) < now) {
					return { label: tt.ended, class: "ended" };
				}

				return { label: tt.selling, class: "active" };
			}

			formatDateTime(dt) {
				if (!dt) return "";
				try {
					const d = new Date(dt);
					if (Number.isNaN(d.getTime())) return dt;
					const yyyy = d.getFullYear();
					const mm = String(d.getMonth() + 1).padStart(2, "0");
					const dd = String(d.getDate()).padStart(2, "0");
					const hh = String(d.getHours()).padStart(2, "0");
					const mi = String(d.getMinutes()).padStart(2, "0");
					return `${yyyy}/${mm}/${dd} ${hh}:${mi}`;
				} catch (e) {
					return dt;
				}
			}
		}

		// Updated renderTicketsTable function to work with backend data
		function renderTicketsTable() {
			const tbody = document.getElementById("tickets-tbody");
			if (!tbody) return;
			
			tbody.innerHTML = "";

			tickets.forEach(ticket => {
				const row = createTicketRow(ticket);
				tbody.appendChild(row);
			});
		}

		// Create table row for ticket
		function createTicketRow(ticket) {
			const template = document.getElementById("ticket-row-template");
			if (!template) {
				// Fallback if template doesn't exist
				const tr = document.createElement("tr");
				tr.dataset.ticketId = ticket.id;
				tr.innerHTML = `
					<td>${ticket.name}</td>
					<td>${ticket.saleStart ? formatDateTime(ticket.saleStart) : ''}</td>
					<td>${ticket.saleEnd ? formatDateTime(ticket.saleEnd) : ''}</td>
					<td>${ticket.quantity || '∞'}</td>
					<td>
						<button onclick="editTicket('${ticket.id}')">Edit</button>
						<button onclick="deleteTicket('${ticket.id}')">Delete</button>
					</td>
				`;
				return tr;
			}
			
			const row = template.content.cloneNode(true).querySelector("tr");
			row.dataset.ticketId = ticket.id;
			// Update row content based on your template structure
			return row;
		}

		// Format date time for display
		function formatDateTime(dateTime) {
			if (!dateTime) return '';
			try {
				return new Date(dateTime).toLocaleString();
			} catch (e) {
				return dateTime;
			}
		}

		// Initialize the ticket manager with backend integration
		document.addEventListener('DOMContentLoaded', () => {
			// Try to initialize with backend first
			initializePage().then(() => {
				// If backend fails, fallback to original TicketManager
			}).catch(() => {
				console.log('Backend initialization failed, using fallback TicketManager');
				new TicketManager();
			});
		});
	</script>

	<style>
		.ticket-overview {
			margin-top: 2rem;
		}

		/* Modal styles */
		.modal-overlay {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0, 0, 0, 0.5);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 1000;
			padding: 1rem;
		}
		.modal {
			background: var(--color-gray-800);
			color: var(--color-gray-100);
			border: 2px solid var(--color-gray-700);
			border-radius: 12px;
			padding: 1.5rem 1.75rem 1.75rem;
			max-width: 640px;
			width: 100%;
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
		}
		.modal h2 {
			margin-top: 0;
			font-size: 1.25rem;
		}
		.form-grid {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 1rem 1.25rem;
			margin-top: 1rem;
		}
		.form-grid label {
			display: flex;
			flex-direction: column;
			gap: 0.4rem;
			font-size: 0.85rem;
		}
		.form-grid input {
			padding: 0.5rem 0.6rem;
			border: 1px solid var(--color-gray-600);
			background: var(--color-gray-900);
			color: inherit;
			border-radius: 6px;
			font-family: inherit;
		}
		.form-grid input:focus {
			outline: none;
			border-color: #ffc107;
			box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
		}
		.status-readonly {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			font-size: 0.9rem;
		}
		.modal-actions {
			display: flex;
			gap: 0.75rem;
			margin-top: 1.5rem;
			justify-content: flex-end;
		}
		.button.primary {
			background: #ffc107;
			border-color: #e0a800;
			color: #2a2416;
		}
		.button.primary:hover {
			background: #ffb507;
		}
		.status-badge.pending {
			background: #fff3cd;
			color: #856404;
			border: 1px solid #ffe8a1;
		}
		/* Reuse existing .status-badge.active/.ended styles */
		@media (max-width: 640px) {
			.form-grid {
				grid-template-columns: 1fr;
			}
		}

		.ticket-overview h2 {
			margin-bottom: 1.5rem;
			font-size: 1.5rem;
			color: var(--color-gray-200);
		}

		.table-container {
			overflow-x: auto;
			border-radius: 8px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			background-color: var(--color-gray-800);
			border: 2px solid var(--color-gray-900);
		}

		.tickets-table {
			width: 100%;
			border-collapse: collapse;
			min-width: 900px;
		}

		.tickets-table th,
		.tickets-table td {
			padding: 0.5rem 1rem;
			text-align: left;
			border-bottom: 1px solid var(--color-gray-400);
		}

		.tickets-table th {
			background-color: var(--color-gray-700);
			color: var(--color-gray-200);
			font-weight: 600;
			font-size: 0.95rem;
			position: sticky;
			top: 0;
		}

		.tickets-table tr:last-child td {
			border-bottom: none;
		}

		.tickets-table tr:hover {
			background-color: #f8f9fa;
		}

		.time-cell {
			font-size: 0.9rem;
			line-height: 1.4;
		}

		.ticket-name {
			max-width: 10rem;
		}

		.actions-cell {
			width: 200px;
			min-width: 200px;
		}

		.action-buttons {
			display: flex;
			gap: 0.5rem;
			flex-wrap: wrap;
		}

		.action-buttons .button {
			padding: 0.25rem 0.5rem;
			font-size: 0.85rem;
			margin: 0;
			white-space: nowrap;
		}

		.delete {
			background-color: #f8d7da;
			border-color: #f5c6cb;
			color: #721c24;
		}

		.delete:hover {
			background-color: #f1b0b7;
		}

		.edit-input {
			width: 100%;
			padding: 0.4rem;
			border: 1px solid #ccc;
			border-radius: 4px;
			font-size: 0.9rem;
			font-family: inherit;
			box-sizing: border-box;
		}

		.edit-input:focus {
			outline: none;
			border-color: var(--color-gray-900);
			box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
		}

		.status-badge {
			padding: 0.3rem 0.6rem;
			border-radius: 4px;
			font-size: 0.85rem;
			font-weight: 500;
			white-space: nowrap;
			display: inline-block;
		}

		.status-badge.active {
			background-color: #d4edda;
			color: #155724;
			border: 1px solid #c3e6cb;
		}

		.status-badge.ended {
			background-color: #f8d7da;
			color: #721c24;
			border: 1px solid #f5c6cb;
		}

		.add-ticket-section {
			margin-top: 2rem;
			text-align: center;
		}

		.add-ticket-btn {
			padding: 0.8rem 1.5rem;
			font-size: 1rem;
			background-color: #d4edda;
			border-color: #c3e6cb;
			color: #155724;
		}

		.add-ticket-btn:hover {
			background-color: #c3e6cb;
		}

		/* New ticket row specific styles */
		.tickets-table tr[data-editing="true"] {
			background-color: #fffbf0;
			border-left: 4px solid #ffc107;
		}

		.tickets-table tr[data-editing="true"] .edit-input {
			border-color: #ffc107;
		}

		.tickets-table tr[data-editing="true"] .edit-input:focus {
			border-color: #e0a800;
			box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
		}

		/* Responsive design for mobile */
		@media (max-width: 768px) {
			.table-container {
				border: none;
				box-shadow: none;
			}

			.tickets-table {
				min-width: unset;
			}

			.tickets-table,
			.tickets-table thead,
			.tickets-table tbody,
			.tickets-table th,
			.tickets-table td,
			.tickets-table tr {
				display: block;
			}

			.tickets-table thead tr {
				position: absolute;
				top: -9999px;
				left: -9999px;
			}

			.tickets-table tr {
				border: 2px solid var(--color-gray-900);
				margin-bottom: 1rem;
				border-radius: 8px;
				background-color: var(--color-gray-800);
			}

			.tickets-table tr[data-editing="true"] {
				border-color: #ffc107;
				background-color: #fffbf0;
			}

			.tickets-table td {
				border: none;
				position: relative;
				padding: 0.8rem 1rem;
				border-bottom: 1px solid var(--color-gray-400);
			}

			.tickets-table td:last-child {
				border-bottom: none;
			}

			.tickets-table td:before {
				content: attr(data-label) ": ";
				font-weight: 600;
				color: var(--color-gray-900);
				margin-right: 0.5rem;
			}

			.actions-cell:before {
				content: "操作: ";
			}

			.action-buttons {
				flex-direction: column;
				gap: 0.3rem;
			}

			.action-buttons .button {
				width: 100%;
				text-align: center;
			}

			.edit-input {
				margin-top: 0.3rem;
				width: calc(100% - 0.6rem);
			}

			.time-cell {
				max-width: unset;
			}

			.status-badge {
				display: inline-block;
				margin-top: 0.2rem;
			}
		}

		@media (max-width: 480px) {
			main {
				margin-left: 1rem;
				padding: 1rem;
			}

			.tickets-table td {
				padding: 0.6rem 0.8rem;
			}

			.time-cell {
				font-size: 0.85rem;
			}

			.action-buttons .button {
				font-size: 0.8rem;
				padding: 0.4rem 0.6rem;
			}
		}

		/* Dark mode adjustments */
		@media (prefers-color-scheme: dark) {
			.tickets-table tr:hover {
				background-color: var(--color-gray-700);
			}

			.tickets-table tr[data-editing="true"] {
				background-color: #2a2416;
				border-left-color: #ffc107;
			}

			.tickets-table td {
				border-bottom-color: var(--color-gray-600);
			}

			.status-badge.active {
				background-color: #1e3a2e;
				color: #4ade80;
				border-color: #16a34a;
			}

			.status-badge.ended {
				background-color: #3a1e1e;
				color: #f87171;
				border-color: #dc2626;
			}

			.delete {
				background-color: #3a1e1e;
				border-color: #dc2626;
				color: #f87171;
			}

			.delete:hover {
				background-color: #4a1e1e;
			}

			.add-ticket-btn {
				background-color: #1e3a2e;
				border-color: #16a34a;
				color: #4ade80;
			}

			.add-ticket-btn:hover {
				background-color: #2e4a3e;
			}

			.edit-input {
				background-color: var(--color-gray-800);
				border-color: #555;
			}

			.edit-input:focus {
				border-color: var(--color-gray-800);
				box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
			}

			.tickets-table tr[data-editing="true"] .edit-input {
				border-color: #ffc107;
			}

			.tickets-table tr[data-editing="true"] .edit-input:focus {
				border-color: #e0a800;
				box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
			}

			@media (max-width: 768px) {
				.tickets-table tr {
					border-color: var(--color-gray-800);
				}

				.tickets-table tr[data-editing="true"] {
					border-color: #ffc107;
					background-color: #2a2416;
				}

				.tickets-table td {
					border-bottom-color: var(--color-gray-600);
				}
			}
		}
	</style>
</Layout>
